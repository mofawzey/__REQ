// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus,
    &:focus-within {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus,
    &:focus-within {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/**
1-media("sm-and-down")
2-flex
3-center_me(block,position)
4-square
5-circle
6-rectangle
7-ellipsis
8-overlay
9-btnRippleEffect
10-gradient
**/

/// @example scss - Usage
/// .foo{
///   @include media("sm-and-down"){
///     gap:10px;
///   }
/// }
///
/// @example css - CSS output
/// .foo{
///   @media only screen and (max-width:767.98px){
///     gap:10px;
///   }
/// }
@mixin media($media) {
  @media #{map-get($display-breakpoints,$media)} {
    @content;
  }
}

// flex();
@mixin flex($value: center, $wrap: true, $gap: 0) {
  display: flex;

  @if $wrap ==true {
    flex-wrap: wrap;
  }

  align-items: center;
  justify-content: $value;
  gap: $gap;
}

// center_me(block,position)
@mixin center_me($with: block) {
  @if $with==block {
    display: block;
    // margin: auto;
    margin-inline: auto;
  }

  @if $with ==position {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
}

// squre(100px)
@mixin square($size: 100px) {
  width: $size;
  height: $size;
}

// circle(100px)
@mixin circle($size) {
  width: #{$size}px;
  height: #{$size}px;
  border-radius: 50%;
}

//  width * height
@mixin rectangle($size: 256px) {
  width: $size;
  height: $size / 4.384615384615385; // 4
}

// ellipsis();
@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// ::before{overlay}
@mixin overlay($color: black, $opacity: 0.2) {
  &::before {
    position: absolute;
    content: "";
    width: 100%;
    height: 100%;
    background: $color;
    left: 0;
    top: 0;
    z-index: 1;
    opacity: $opacity;
  }
}

// btn_ripple_______NOT_WORKING
@mixin btnRippleEffect() {
  button .ripple {
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.7);
    position: absolute;
    transform: scale(0);
    animation: ripple 0.6s linear;
  }

  @keyframes ripple {
    to {
      transform: scale(2.5);
      opacity: 0;
    }
  }
}

// gradient
@mixin gradient($type: bg) {
  background-color: -webkit-linear-gradient(315deg, $primary-color 0%, $secondary-color 100%);

  @if $type ==text {
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    width: max-content;
    max-width: 100%;
  }
}

/// Initializing New Constants
/// @example
/// @include const("SECTION_PY",6rem 0);
@mixin const($name, $value) {
  $CONSTANTS: map-merge(
    $CONSTANTS,
    (
      $name: $value,
    )
  ) !global;
}
